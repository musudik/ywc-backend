
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  displayName: 'displayName',
  emailVerified: 'emailVerified',
  profileImage: 'profileImage',
  phoneNumber: 'phoneNumber',
  firebaseUid: 'firebaseUid',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  roleId: 'roleId',
  resetToken: 'resetToken',
  resetTokenExpiry: 'resetTokenExpiry'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChildScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  birthDate: 'birthDate',
  birthPlace: 'birthPlace',
  nationality: 'nationality',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  analysisFormId: 'analysisFormId'
};

exports.Prisma.ApplicantScalarFieldEnum = {
  id: 'id',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  salutation: 'salutation',
  title: 'title',
  firstName: 'firstName',
  lastName: 'lastName',
  maidenName: 'maidenName',
  birthDate: 'birthDate',
  birthPlace: 'birthPlace',
  birthCountry: 'birthCountry',
  nationality: 'nationality',
  isEUCitizen: 'isEUCitizen',
  residencePermit: 'residencePermit',
  inGermanySince: 'inGermanySince',
  street: 'street',
  houseNumber: 'houseNumber',
  postalCode: 'postalCode',
  city: 'city',
  residentSince: 'residentSince',
  previousAddress: 'previousAddress',
  phoneLandline: 'phoneLandline',
  phoneMobile: 'phoneMobile',
  email: 'email',
  taxId: 'taxId',
  maritalStatus: 'maritalStatus',
  separationOfGoods: 'separationOfGoods',
  numberOfChildren: 'numberOfChildren',
  childrenBirthDates: 'childrenBirthDates',
  profession: 'profession',
  employmentType: 'employmentType',
  employedSince: 'employedSince',
  contractType: 'contractType',
  contractUntil: 'contractUntil',
  employerName: 'employerName',
  employerInGermany: 'employerInGermany',
  netIncome: 'netIncome',
  grossIncome: 'grossIncome',
  numberOfSalaries: 'numberOfSalaries',
  childBenefit: 'childBenefit',
  otherIncome: 'otherIncome',
  iban: 'iban',
  bic: 'bic',
  analysisFormId: 'analysisFormId',
  immobillionFormId: 'immobillionFormId'
};

exports.Prisma.ImmobillionApplicantDetailsScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  applicantId: 'applicantId',
  salaryCurrency: 'salaryCurrency',
  salaryCurrencyOther: 'salaryCurrencyOther',
  hasPartTimeJob: 'hasPartTimeJob',
  partTimeSince: 'partTimeSince',
  isFreelancer: 'isFreelancer',
  isSelfEmployed: 'isSelfEmployed',
  selfEmployedAs: 'selfEmployedAs',
  selfEmployedSince: 'selfEmployedSince',
  selfEmployedCompany: 'selfEmployedCompany',
  vehiclesInHousehold: 'vehiclesInHousehold',
  retirementStart: 'retirementStart',
  statutoryPension: 'statutoryPension',
  privatePension: 'privatePension',
  interpreterRequired: 'interpreterRequired',
  monthlyIncome: 'monthlyIncome',
  monthlyExpenses: 'monthlyExpenses',
  assets: 'assets',
  liabilities: 'liabilities'
};

exports.Prisma.ImmobillionFormScalarFieldEnum = {
  id: 'id',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  formType: 'formType',
  formVersion: 'formVersion'
};

exports.Prisma.AnalysisFormScalarFieldEnum = {
  id: 'id',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  consultantName: 'consultantName',
  officeLocation: 'officeLocation',
  analysisDate: 'analysisDate',
  coldRent: 'coldRent',
  gas: 'gas',
  electricity: 'electricity',
  telecommunication: 'telecommunication',
  subscriptions: 'subscriptions',
  accountMaintenanceFee: 'accountMaintenanceFee',
  livingExpenses: 'livingExpenses',
  alimony: 'alimony',
  otherExpenses: 'otherExpenses',
  addLoanOrLeasing: 'addLoanOrLeasing',
  loanBank: 'loanBank',
  loanAmount: 'loanAmount',
  loanMonthlyRate: 'loanMonthlyRate',
  loanInterest: 'loanInterest',
  analysisConsent: 'analysisConsent',
  analysisConsentText: 'analysisConsentText',
  analysisConsentSignature: 'analysisConsentSignature',
  analysisLocation: 'analysisLocation',
  analysisConsentDate: 'analysisConsentDate'
};

exports.Prisma.PersonalDetailsScalarFieldEnum = {
  id: 'id',
  personalId: 'personalId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  coachId: 'coachId',
  applicantType: 'applicantType',
  firstName: 'firstName',
  lastName: 'lastName',
  streetAddress: 'streetAddress',
  postalCode: 'postalCode',
  city: 'city',
  phone: 'phone',
  email: 'email',
  birthDate: 'birthDate',
  birthPlace: 'birthPlace',
  maritalStatus: 'maritalStatus',
  nationality: 'nationality',
  housing: 'housing'
};

exports.Prisma.EmploymentDetailsScalarFieldEnum = {
  id: 'id',
  employmentId: 'employmentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  personalId: 'personalId',
  employmentType: 'employmentType',
  occupation: 'occupation',
  contractType: 'contractType',
  contractDuration: 'contractDuration',
  employerName: 'employerName',
  employedSince: 'employedSince'
};

exports.Prisma.IncomeDetailsScalarFieldEnum = {
  id: 'id',
  incomeId: 'incomeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  personalId: 'personalId',
  grossIncome: 'grossIncome',
  netIncome: 'netIncome',
  taxClass: 'taxClass',
  taxId: 'taxId',
  numberOfSalaries: 'numberOfSalaries',
  childBenefit: 'childBenefit',
  otherIncome: 'otherIncome',
  incomeTradeBusiness: 'incomeTradeBusiness',
  incomeSelfEmployedWork: 'incomeSelfEmployedWork',
  incomeSideJob: 'incomeSideJob'
};

exports.Prisma.ExpensesDetailsScalarFieldEnum = {
  id: 'id',
  expensesId: 'expensesId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  personalId: 'personalId',
  coldRent: 'coldRent',
  electricity: 'electricity',
  livingExpenses: 'livingExpenses',
  gas: 'gas',
  telecommunication: 'telecommunication',
  accountMaintenanceFee: 'accountMaintenanceFee',
  alimony: 'alimony',
  subscriptions: 'subscriptions',
  otherExpenses: 'otherExpenses'
};

exports.Prisma.AssetScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  personalId: 'personalId',
  realEstate: 'realEstate',
  securities: 'securities',
  bankDeposits: 'bankDeposits',
  buildingSavings: 'buildingSavings',
  insuranceValues: 'insuranceValues',
  otherAssets: 'otherAssets'
};

exports.Prisma.LiabilityScalarFieldEnum = {
  id: 'id',
  liabilityId: 'liabilityId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  personalId: 'personalId',
  loanType: 'loanType',
  loanBank: 'loanBank',
  loanAmount: 'loanAmount',
  loanMonthlyRate: 'loanMonthlyRate',
  loanInterest: 'loanInterest'
};

exports.Prisma.GoalsAndWishesScalarFieldEnum = {
  id: 'id',
  goalsAndWishesId: 'goalsAndWishesId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  personalId: 'personalId',
  retirementPlanning: 'retirementPlanning',
  capitalFormation: 'capitalFormation',
  realEstateGoals: 'realEstateGoals',
  financing: 'financing',
  protection: 'protection',
  healthcareProvision: 'healthcareProvision',
  otherGoals: 'otherGoals'
};

exports.Prisma.RiskAppetiteScalarFieldEnum = {
  id: 'id',
  riskAppetiteId: 'riskAppetiteId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  personalId: 'personalId',
  riskAppetite: 'riskAppetite',
  investmentHorizon: 'investmentHorizon',
  knowledgeExperience: 'knowledgeExperience',
  healthInsurance: 'healthInsurance',
  healthInsuranceNumber: 'healthInsuranceNumber',
  healthInsuranceProof: 'healthInsuranceProof'
};

exports.Prisma.ConsentScalarFieldEnum = {
  id: 'id',
  consentId: 'consentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  personalId: 'personalId',
  consentType: 'consentType',
  consent: 'consent',
  consentText: 'consentText',
  consentSignature: 'consentSignature',
  consentDate: 'consentDate',
  location: 'location'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  personalId: 'personalId',
  documentName: 'documentName',
  documentLocation: 'documentLocation',
  documentDate: 'documentDate'
};

exports.Prisma.FormScalarFieldEnum = {
  id: 'id',
  formId: 'formId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  personalId: 'personalId',
  formType: 'formType',
  formName: 'formName',
  formLink: 'formLink',
  createdDate: 'createdDate',
  updatedDate: 'updatedDate'
};

exports.Prisma.CustomFormScalarFieldEnum = {
  id: 'id',
  customFormId: 'customFormId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  personalId: 'personalId',
  formTemplate: 'formTemplate',
  formName: 'formName',
  createdDate: 'createdDate',
  updatedDate: 'updatedDate'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.ApplicantType = exports.$Enums.ApplicantType = {
  PrimaryApplicant: 'PrimaryApplicant',
  SecondaryApplicant: 'SecondaryApplicant'
};

exports.EmploymentType = exports.$Enums.EmploymentType = {
  PrimaryEmployment: 'PrimaryEmployment',
  SecondaryEmployment: 'SecondaryEmployment'
};

exports.LoanType = exports.$Enums.LoanType = {
  PersonalLoan: 'PersonalLoan',
  HomeLoan: 'HomeLoan',
  CarLoan: 'CarLoan',
  BusinessLoan: 'BusinessLoan',
  EducationLoan: 'EducationLoan',
  OtherLoan: 'OtherLoan'
};

exports.ConsentType = exports.$Enums.ConsentType = {
  Analysis: 'Analysis',
  Immobillion: 'Immobillion',
  PrivateHealthInsurance: 'PrivateHealthInsurance',
  StateHealthInsurance: 'StateHealthInsurance',
  KFZ: 'KFZ',
  Electricity: 'Electricity',
  Loans: 'Loans',
  Sanuspay: 'Sanuspay',
  Gems: 'Gems',
  Other: 'Other'
};

exports.FormType = exports.$Enums.FormType = {
  Analysis: 'Analysis',
  Immobillion: 'Immobillion',
  PrivateHealthInsurance: 'PrivateHealthInsurance',
  StateHealthInsurance: 'StateHealthInsurance',
  KFZ: 'KFZ',
  Electricity: 'Electricity',
  Loans: 'Loans',
  Sanuspay: 'Sanuspay',
  Gems: 'Gems',
  Other: 'Other'
};

exports.Prisma.ModelName = {
  User: 'User',
  Role: 'Role',
  Child: 'Child',
  Applicant: 'Applicant',
  ImmobillionApplicantDetails: 'ImmobillionApplicantDetails',
  ImmobillionForm: 'ImmobillionForm',
  AnalysisForm: 'AnalysisForm',
  PersonalDetails: 'PersonalDetails',
  EmploymentDetails: 'EmploymentDetails',
  IncomeDetails: 'IncomeDetails',
  ExpensesDetails: 'ExpensesDetails',
  Asset: 'Asset',
  Liability: 'Liability',
  GoalsAndWishes: 'GoalsAndWishes',
  RiskAppetite: 'RiskAppetite',
  Consent: 'Consent',
  Document: 'Document',
  Form: 'Form',
  CustomForm: 'CustomForm'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
